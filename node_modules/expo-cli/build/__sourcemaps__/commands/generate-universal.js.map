{"version":3,"sources":["commands/generate-universal.js"],"names":["NPM_TEMPLATE_VERSION","TEMP_DIR_NAME","archive","decompress","resolve","reject","src","dest","error","program","command","description","asyncAction","template","name","message","configuration","execSync","toString","slice","existsSync","mkdirSync","unlinkSync","copy","join","jsName","remove","podName","renameSync","regex","replacement","paths","recursive","silent","javaModule","javaDir","split","mkdirpSync","placeholderPath","appendFileSync"],"mappings":"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","file":"../../commands/generate-universal.js","sourcesContent":["/**\n * @flow\n */\nimport path from 'path';\nimport proc from 'child_process';\nimport targz from 'targz';\nimport fs from 'fs';\nimport fsExtra from 'fs-extra';\nimport replace from 'replace';\n\nimport CommandError from '../CommandError';\nimport prompt from '../prompt';\n\nconst NPM_TEMPLATE_VERSION = '^1.0.1';\nconst TEMP_DIR_NAME = `temp-expo-module-template`;\nlet archive;\n\nconst decompress = async () => {\n  return new Promise((resolve, reject) => {\n    targz.decompress(\n      {\n        src: archive,\n        dest: TEMP_DIR_NAME,\n      },\n      error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      }\n    );\n  });\n};\n\nexport default (program: any) => {\n  program\n    .command('generate <template>')\n    .description('Generate a module from a template.')\n    .asyncAction(async template => {\n      if (template !== 'universal') {\n        throw new CommandError(\n          'UNKNOWN_TEMPLATE',\n          `Template not found: '${template}'. Valid options are: universal`\n        );\n      }\n      const configuration = await prompt([\n        {\n          name: 'jsName',\n          message: 'How would you like to call your module in JS/npm? (eg. expo-camera)',\n        },\n        {\n          name: 'podName',\n          message:\n            'How would you like to call your module in CocoaPods? (eg. EXCamera) (leave empty to not include iOS part)',\n        },\n        {\n          name: 'javaModule',\n          message: 'How would you like to call your module in Java? (eg. expo.modules.camera)',\n        },\n      ]);\n\n      archive = proc\n        .execSync(`npm pack expo-module-template@${NPM_TEMPLATE_VERSION}`)\n        .toString()\n        .slice(0, -1);\n      if (!fs.existsSync(TEMP_DIR_NAME)) {\n        fs.mkdirSync(TEMP_DIR_NAME);\n      }\n      await decompress();\n\n      fs.unlinkSync(archive);\n      await fsExtra.copy(path.join(TEMP_DIR_NAME, `package`), `${configuration.jsName}`);\n      await fsExtra.remove(TEMP_DIR_NAME);\n\n      if (configuration.podName) {\n        fs.renameSync(\n          path.join(configuration.jsName, `ios`, `EXModuleTemplate.podspec`),\n          path.join(configuration.jsName, `ios`, `${configuration.podName}.podspec`)\n        );\n\n        fs.renameSync(\n          path.join(configuration.jsName, `ios`, `EXModuleTemplate`, `EXModuleTemplate.h`),\n          path.join(configuration.jsName, `ios`, `EXModuleTemplate`, `${configuration.podName}.h`)\n        );\n\n        fs.renameSync(\n          path.join(configuration.jsName, `ios`, `EXModuleTemplate`, `EXModuleTemplate.m`),\n          path.join(configuration.jsName, `ios`, `EXModuleTemplate`, `${configuration.podName}.m`)\n        );\n\n        fs.renameSync(\n          path.join(configuration.jsName, `ios`, `EXModuleTemplate`),\n          path.join(configuration.jsName, `ios`, `${configuration.podName}`)\n        );\n\n        fs.renameSync(\n          path.join(configuration.jsName, `ios`, `EXModuleTemplate.xcodeproj`),\n          path.join(configuration.jsName, `ios`, `${configuration.podName}.xcodeproj`)\n        );\n      } else {\n        await fsExtra.remove(path.join(configuration.jsName, `ios`));\n      }\n\n      replace({\n        regex: 'expo-module-template',\n        replacement: configuration.jsName,\n        paths: [configuration.jsName],\n        recursive: true,\n        silent: true,\n      });\n\n      replace({\n        regex: 'expo.modules.template',\n        replacement: configuration.javaModule,\n        paths: [configuration.jsName],\n        recursive: true,\n        silent: true,\n      });\n\n      replace({\n        regex: 'EXModuleTemplate',\n        replacement: configuration.podName,\n        paths: [configuration.jsName],\n        recursive: true,\n        silent: true,\n      });\n\n      replace({\n        regex: `\"version\": \".*\",`,\n        replacement: `\"version\": \"1.0.0\",`,\n        paths: [path.join(configuration.jsName, `package.json`)],\n        recursive: false,\n        silent: true,\n      });\n\n      const javaDir = path.join(\n        configuration.jsName,\n        'android',\n        'src',\n        'main',\n        'java',\n        ...configuration.javaModule.split('.')\n      );\n      fsExtra.mkdirpSync(javaDir);\n\n      const placeholderPath = path.join(javaDir, `Placeholder.java`);\n      fs.appendFileSync(placeholderPath, `package ${configuration.javaModule};\\n`);\n      fs.appendFileSync(placeholderPath, `class Placeholder {}`);\n    });\n};\n"],"sourceRoot":"/expo-cli@2.2.0/src"}